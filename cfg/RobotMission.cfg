#!/usr/bin/env python3

PACKAGE = "dynamic_tt"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
side = gen.add_group("Map")
controller = gen.add_group("Controller")
parameters = gen.add_group("Parameters")

# 'name', 'type', 'level', 'description', 'default', 'min', 'max'
# side
side_enum = gen.enum([gen.const("Inside", double_t, 1.0, "Inside"),
                    gen.const("Outside", double_t, -1.0, "Outside")], "Robot following side")
side.add("map_side", double_t, 0, "Robot moves by the Inside or Outside of the question mark", 1.0, -1.0, 1.0, edit_method=side_enum)
# bldc.add("bldc_velocity", double_t, 0, "Wheel velocity in m/s", 0, 0.0, 1.0)
# bldc.add("bldc_rpm", int_t, 0, "Wheel rpm in m/s", 0, 0, 3700)
# Controller
controller.add("kp_angular", double_t, 0, "Proportional angular velocity controller", 4.0, 0.0, 5.0)
controller.add("kp_wall_distance", double_t, 0, "Proportional wall distance controller", 0.2, 0.0, 3.0)
controller.add("kp_linear", double_t, 0, "Proportional linear controller", 0.3, 0.0, 0.5)
controller.add("kp_wall_linear", double_t, 0, "Inverse propotional linear controller to wall distance", 0.03, 0.0, 0.1)

# Parameters
parameters.add("distance_to_wall", double_t, 0, "Distance to wall", 0.7, 0.0, 1)
parameters.add("max_laser_range_to_wall", double_t, 0, "Max valid range to wall detection", 2.0, 0.0, 10.0)

gen.add("EMERGENCY_STOP", bool_t, 0, "An emergency button", False)

exit(gen.generate(PACKAGE, "dynamic_tt", "RobotMission"))
